# Описание: Пример использования всех основных методов работы со списками в Python

# Создадим базовый список для работы
sample_list = [1, 2, 3, 4, 5]

''' 
        1. Метод append() — добавляет элемент в конец списка, переданный ему в качестве аргумента. 
        Синтаксис метода append() выглядит следующим образом:
        list.append(item)
        list — это список, в который вы хотите добавить элемент.
        item — элемент, который вы хотите добавить в конец списка. Тип параметра может быть любым: числа, строки, словари и т.д. 
'''
# Пример:
sample_list.append(6)
print(sample_list)
# Теперь sample_list = [1, 2, 3, 4, 5, 6]

'''
        2. Метод insert() — вставляет элемент на определённую позицию.
        Синтаксис метода insert() выглядит следующим образом:
        list.insert(index, element)
        list — это список, в который вы хотите вставить элемент.
        index — позиция, на которую вы хотите вставить элемент. Индексация начинается с 0.
        element — элемент, который вы хотите вставить в список.
'''
# Пример:
sample_list.insert(2, 99)
print(sample_list)
# Теперь sample_list = [1, 2, 99, 3, 4, 5, 6]

'''
        3. Метод extend() — расширяет список, добавляя элементы другого списка (или любого итератора).
        Синтаксис метода extend() выглядит следующим образом:
        list.extend(iterable)
        list — это список, который вы хотите расширить.
        iterable — это любой итерируемый объект (например, список, кортеж, строка).
'''
# Пример:
sample_list.extend([7, 8, 9])
print(sample_list)
# Теперь sample_list = [1, 2, 99, 3, 4, 5, 6, 7, 8, 9]

'''
        4. Метод remove() — удаляет первый найденный элемент с указанным значением.
        Синтаксис метода remove() выглядит следующим образом:
        list.remove(value)
        list — это список, из которого вы хотите удалить элемент.
        value — значение элемента, который вы хотите удалить.
'''
# Пример:
sample_list.remove(99)
print(sample_list)
# Теперь sample_list = [1, 2, 3, 4, 5, 6, 7, 8, 9]

'''
        5. Метод pop() — удаляет элемент по индексу и возвращает его.
        Синтаксис метода pop() выглядит следующим образом:
        list.pop(index)
        list — это список из которого вы хотите удалить элемент.
        index — (необязательный) индекс элемента, который вы хотите удалить. Если не указан, удаляется последний элемент.
'''
# Пример:
popped_element = sample_list.pop(3)
print(popped_element)  # popped_element = 4
print(sample_list)     # Теперь sample_list = [1, 2, 3, 5, 6, 7, 8, 9]

'''
        6. Метод clear() — удаляет все элементы из списка.
        Синтаксис метода clear() выглядит следующим образом:
        list.clear()
        list — это список, из которого вы хотите удалить все элементы.
'''
# Пример:
# sample_list.clear()
# print(sample_list)  # Теперь sample_list = []

# (Для примера нового списка пересоздадим исходные данные)
sample_list = [5, 3, 8, 6, 2, 7]

'''
        7. Метод index() — возвращает индекс первого найденного элемента с указанным значением.
        Синтаксис метода index() выглядит следующим образом:
        list.index(value)
        list — это список, в котором вы хотите найти элемент.
        value — значение элемента, индекс которого вы хотите получить. 
'''
# Пример:
index_of_8 = sample_list.index(8)
print(index_of_8)  # index_of_8 = 2

'''
        8. Метод count() — возвращает количество элементов с указанным значением.
        Синтаксис метода count() выглядит следующим образом:
        list.count(value) == 1
        list — это список, в котором вы хотите посчитать количество вхождений.
        value — значение элемента, количество вхождений которого вы хотите узнать.
'''
# Пример:
count_of_7 = sample_list.count(7)
print(count_of_7)  # count_of_7 = 1

'''
        9. Метод sort() — сортирует список по возрастанию или по пользовательскому ключу.
        Синтаксис метода sort() выглядит следующим образом:
        list.sort(key=None, reverse=False)
        list — это список, который вы хотите отсортировать.
        key — (необязательный) функция, которая определяет порядок сортировки.
        reverse — (необязательный) если True, сортировка выполняется в обратном порядке.
'''
# Пример:
# sample_list = [5, 3, 8, 6, 2, 7]
sample_list.sort()
print(sample_list)  # Теперь sample_list = [2, 3, 5, 6, 7, 8]

# Пример сортировки по убыванию:
sample_list.sort(reverse=True)
print(sample_list)  # Теперь sample_list = [8, 7, 6, 5, 3, 2]

# Сравнение методов sort() и sorted() в Python
# Метод sort() изменяет сам список,
# а метод sorted() возвращает новый отсортированный список.

# Пример использования sort()
numbers = [5, 2, 9, 1, 5, 6]
print("Оригинальный список:", numbers)
numbers.sort()
print("Отсортированный список с помощью sort():", numbers)

# Пример использования sorted()
original_numbers = [5, 2, 9, 1, 5, 6]
print("Оригинальный список:", original_numbers)
sorted_numbers = sorted(original_numbers)
print("Отсортированный список с помощью sorted():", sorted_numbers)
print("Оригинальный список после использования sorted():",
      original_numbers)

'''
        10. Метод reverse() — разворачивает список (меняет порядок элементов на обратный).
        Синтаксис метода reverse() выглядит следующим образом:
        list.reverse()
        list — это список, который вы хотите развернуть.
'''
# Пример:
sample_list.reverse()
print(sample_list)  # Теперь sample_list = [2, 3, 5, 6, 7, 8]

'''
        11. Метод copy() — возвращает поверхностную копию списка.
        Синтаксис метода copy() выглядит следующим образом:
        list.copy()
        list — это список, который вы хотите скопировать.
'''

'''
        Поверхностная копия — это термин, который используется в программировании
        для обозначения процесса копирования объекта таким образом, что создается новый объект, 
        но все ссылки на вложенные объекты (например, списки, массивы, структуры данных)
        остаются связанными с оригинальными вложенными объектами. 
        Это означает, что если вы измените вложенный объект в копии, это изменение также отразится 
        на оригинальном объекте, потому что сама копия не создает новых экземпляров вложенных структур, 
        а лишь копирует ссылки на существующие объекты.
'''
# Пример:
copied_list = sample_list.copy()
print(copied_list)  # copied_list = [2, 3, 5, 6, 7, 8]

# Дополнительно: Пример работы с операторами и срезами в списках
# a) Сложение списков
list1 = [1, 2, 3]
list2 = [4, 5, 6]
combined_list = list1 + list2
print(combined_list)  # combined_list = [1, 2, 3, 4, 5, 6]

# b) Повторение списка
repeated_list = list1 * 2
print(repeated_list)  # repeated_list = [1, 2, 3, 1, 2, 3]

# c) Срезы списка
'''
        В Python срез (slice) — это способ получить часть последовательности (списка, строки и т.д.) по индексам.
        
        Синтаксис среза
        some_list[START:STOP:STEP]
        У среза три параметра:
        START — индекс первого элемента в выборке
        STOP — индекс элемента списка, перед которым срез должен закончиться. Сам элемент с индексом STOP не будет входить в выборку
        STEP — шаг выбираемых индексов
'''
# Пример среза
sliced_list = sample_list[1:4]
print(sliced_list)  # sliced_list = [3, 5, 6]

# Срез с шагом
stepped_list = sample_list[::2]
print(stepped_list)  # stepped_list = [2, 5, 7]

# Срез в обратном порядке
reversed_list = sample_list[::-1]
print(reversed_list)  # reversed_list = [8, 7, 6, 5, 3, 2]

# d) Проверка наличия элемента в списке
is_present = 5 in sample_list
print(is_present)  # is_present = True

# e) Перебор списка с помощью цикла
print("Перебор элементов списка:")
for item in sample_list:
    print(item)

# Полный пример вывода всех полученных данных:
print("\nsample_list после всех операций:", sample_list)
print("copied_list:", copied_list)
print("combined_list:", combined_list)
print("repeated_list:", repeated_list)
print("sliced_list:", sliced_list)
print("stepped_list:", stepped_list)
print("reversed_list:", reversed_list)
print("Присутствует ли число 5 в sample_list:", is_present)

# Создадим список чисел
numbers = [1, 2, 3, 4, 5]

# Найдём сумму всех элементов списка
total_sum = sum(numbers)

# Вывод результата
print("Сумма элементов списка:", total_sum)

# Длина списка
print(len(numbers))



